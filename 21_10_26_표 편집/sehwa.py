def solution(n, k, cmd):
    delete = []
    graph = [i for i in range(n)]
    for cmd in cmd:
        if cmd[0] == "U":
            k -= int(cmd[2])
        elif cmd[0] =="D":
            k += int(cmd[2])
        elif cmd == "C":
            graph.remove(k)
            delete.append(k)
            if k < len(graph) :
                k += 1
            else :
                k = len(graph)
        elif cmd == "Z":
            graph.append(delete.pop())
    
    answer = ''.join(["X" if i in delete else "O" for i in range(n)])
    
    return answer

ㅅㅣ로ㅏ냐
# 정확성  테스트
# 테스트 1 〉	통과 (0.02ms, 10.4MB)
# 테스트 2 〉	실패 (0.03ms, 10.4MB)
# 테스트 3 〉	실패 (0.03ms, 10.4MB)
# 테스트 4 〉	통과 (0.04ms, 10.4MB)
# 테스트 5 〉	실패 (런타임 에러)
# 테스트 6 〉	실패 (런타임 에러)
# 테스트 7 〉	실패 (런타임 에러)
# 테스트 8 〉	실패 (0.10ms, 10.4MB)
# 테스트 9 〉	실패 (0.07ms, 10.4MB)
# 테스트 10 〉	실패 (런타임 에러)
# 테스트 11 〉	실패 (런타임 에러)
# 테스트 12 〉	실패 (런타임 에러)
# 테스트 13 〉	실패 (런타임 에러)
# 테스트 14 〉	실패 (런타임 에러)
# 테스트 15 〉	실패 (런타임 에러)
# 테스트 16 〉	실패 (런타임 에러)
# 테스트 17 〉	실패 (런타임 에러)
# 테스트 18 〉	실패 (런타임 에러)
# 테스트 19 〉	실패 (런타임 에러)
# 테스트 20 〉	실패 (런타임 에러)
# 테스트 21 〉	실패 (런타임 에러)
# 테스트 22 〉	실패 (런타임 에러)
# 테스트 23 〉	실패 (0.03ms, 10.4MB)
# 테스트 24 〉	실패 (0.03ms, 10.4MB)
# 테스트 25 〉	실패 (런타임 에러)
# 테스트 26 〉	실패 (런타임 에러)
# 테스트 27 〉	실패 (런타임 에러)
# 테스트 28 〉	실패 (런타임 에러)
# 테스트 29 〉	실패 (런타임 에러)
# 테스트 30 〉	실패 (런타임 에러)
# 효율성  테스트
# 테스트 1 〉	실패 (시간 초과)
# 테스트 2 〉	실패 (시간 초과)
# 테스트 3 〉	실패 (시간 초과)
# 테스트 4 〉	실패 (시간 초과)
# 테스트 5 〉	실패 (시간 초과)
# 테스트 6 〉	실패 (시간 초과)
# 테스트 7 〉	실패 (시간 초과)
# 테스트 8 〉	실패 (런타임 에러)
# 테스트 9 〉	실패 (시간 초과)
# 테스트 10 〉	실패 (시간 초과)